name: Deploy FastAPI to AWS Lambda

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: apparel-fastapi-openai-app
  LAMBDA_FUNCTION_NAME: apparel-fastapi-openai-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx

    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "No tests found"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="image_tag=${{ github.sha }}" \
          -var="gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
          -out=tfplan
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform

    - name: Get API Gateway URL
      id: get-url
      run: |
        API_URL=$(terraform output -raw api_gateway_url)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Test deployment
      run: |
        sleep 30  # Wait for Lambda to be ready
        curl -f ${{ steps.get-url.outputs.api_url }}/ || exit 1
        echo "Deployment successful! API URL: ${{ steps.get-url.outputs.api_url }}"

    - name: Update Lambda function
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  cleanup-old-images:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cleanup old ECR images
      run: |
        # Keep only the 5 most recent images
        aws ecr list-images \
          --repository-name $ECR_REPOSITORY \
          --filter tagStatus=TAGGED \
          --query 'imageIds[?imageTag!=`latest`]' \
          --output json | \
        jq -r 'sort_by(.imagePushedAt) | reverse | .[5:] | .[] | .imageDigest' | \
        while read digest; do
          if [ ! -z "$digest" ]; then
            aws ecr batch-delete-image \
              --repository-name $ECR_REPOSITORY \
              --image-ids imageDigest=$digest
          fi
        done